import { OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
import { Meta } from '@angular/platform-browser';
import { Platform } from '@angular/cdk/platform';
import { Clipboard } from '@angular/cdk/clipboard';
import { ShareService } from './share.service';
import { IShareButton } from './share.models';
import * as ɵngcc0 from '@angular/core';
export declare class ShareDirective implements OnInit, OnChanges, OnDestroy {
    private _meta;
    private _platform;
    private _clipboard;
    private _share;
    private _cd;
    private _document;
    /** Share directive element ref */
    private readonly _el;
    /** A ref to button class - used to remove previous class when the button type is changed */
    private _buttonClass;
    /** Stream that emits when button is destroyed */
    private readonly _destroyed;
    /** Stream that emit when share button need to be updated */
    private readonly _updater;
    /** Share button properties */
    shareButton: IShareButton;
    /** Share button color */
    color: string;
    /** Share button text */
    text: string;
    /** Share button icon */
    icon: string | string[];
    /** Share button type */
    shareButtonName: string;
    /** Set meta tags from document head, useful when SEO is supported */
    autoSetMeta: boolean;
    /** Sharing link */
    url: string;
    /** Sets the title parameter */
    title: string;
    /** Sets the description parameter */
    description: string;
    /** Sets the image parameter for sharing on Pinterest */
    image: string;
    /** Sets the tags parameter for sharing on Twitter and Tumblr */
    tags: string;
    /** Stream that emits when share dialog is opened */
    opened: EventEmitter<string>;
    /** Stream that emits when share dialog is closed */
    closed: EventEmitter<string>;
    constructor(_el: ElementRef, _meta: Meta, _platform: Platform, _clipboard: Clipboard, _share: ShareService, _cd: ChangeDetectorRef, _document: any);
    /**
     * Share the link
     */
    share(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private _createShareButton;
    /**
     * Get meta tag content
     */
    private _getMetaTagContent;
    private _shareButtonChanged;
    private _urlChanged;
    /**
     * Get share params from meta tags first and fallback to user inputs
     */
    private getParamsFromMetaTags;
    /**
     * Get share params from user inputs
     */
    private getParamsFromInputs;
    private open;
    private _serializeParams;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShareDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ShareDirective, "[shareButton]", ["shareButton"], { "autoSetMeta": "autoSetMeta"; "url": "url"; "title": "title"; "description": "description"; "image": "image"; "tags": "tags"; "shareButtonName": "shareButton"; }, { "opened": "opened"; "closed": "closed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzaGFyZS1idXR0b24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXRhIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBDbGlwYm9hcmQgfSBmcm9tICdAYW5ndWxhci9jZGsvY2xpcGJvYXJkJztcbmltcG9ydCB7IFNoYXJlU2VydmljZSB9IGZyb20gJy4vc2hhcmUuc2VydmljZSc7XG5pbXBvcnQgeyBJU2hhcmVCdXR0b24gfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTaGFyZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX21ldGE7XG4gICAgcHJpdmF0ZSBfcGxhdGZvcm07XG4gICAgcHJpdmF0ZSBfY2xpcGJvYXJkO1xuICAgIHByaXZhdGUgX3NoYXJlO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIHByaXZhdGUgX2RvY3VtZW50O1xuICAgIC8qKiBTaGFyZSBkaXJlY3RpdmUgZWxlbWVudCByZWYgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbDtcbiAgICAvKiogQSByZWYgdG8gYnV0dG9uIGNsYXNzIC0gdXNlZCB0byByZW1vdmUgcHJldmlvdXMgY2xhc3Mgd2hlbiB0aGUgYnV0dG9uIHR5cGUgaXMgY2hhbmdlZCAqL1xuICAgIHByaXZhdGUgX2J1dHRvbkNsYXNzO1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGJ1dHRvbiBpcyBkZXN0cm95ZWQgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95ZWQ7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXQgd2hlbiBzaGFyZSBidXR0b24gbmVlZCB0byBiZSB1cGRhdGVkICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdXBkYXRlcjtcbiAgICAvKiogU2hhcmUgYnV0dG9uIHByb3BlcnRpZXMgKi9cbiAgICBzaGFyZUJ1dHRvbjogSVNoYXJlQnV0dG9uO1xuICAgIC8qKiBTaGFyZSBidXR0b24gY29sb3IgKi9cbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIC8qKiBTaGFyZSBidXR0b24gdGV4dCAqL1xuICAgIHRleHQ6IHN0cmluZztcbiAgICAvKiogU2hhcmUgYnV0dG9uIGljb24gKi9cbiAgICBpY29uOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICAvKiogU2hhcmUgYnV0dG9uIHR5cGUgKi9cbiAgICBzaGFyZUJ1dHRvbk5hbWU6IHN0cmluZztcbiAgICAvKiogU2V0IG1ldGEgdGFncyBmcm9tIGRvY3VtZW50IGhlYWQsIHVzZWZ1bCB3aGVuIFNFTyBpcyBzdXBwb3J0ZWQgKi9cbiAgICBhdXRvU2V0TWV0YTogYm9vbGVhbjtcbiAgICAvKiogU2hhcmluZyBsaW5rICovXG4gICAgdXJsOiBzdHJpbmc7XG4gICAgLyoqIFNldHMgdGhlIHRpdGxlIHBhcmFtZXRlciAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqIFNldHMgdGhlIGRlc2NyaXB0aW9uIHBhcmFtZXRlciAqL1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgLyoqIFNldHMgdGhlIGltYWdlIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBQaW50ZXJlc3QgKi9cbiAgICBpbWFnZTogc3RyaW5nO1xuICAgIC8qKiBTZXRzIHRoZSB0YWdzIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBUd2l0dGVyIGFuZCBUdW1ibHIgKi9cbiAgICB0YWdzOiBzdHJpbmc7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gc2hhcmUgZGlhbG9nIGlzIG9wZW5lZCAqL1xuICAgIG9wZW5lZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gc2hhcmUgZGlhbG9nIGlzIGNsb3NlZCAqL1xuICAgIGNsb3NlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgY29uc3RydWN0b3IoX2VsOiBFbGVtZW50UmVmLCBfbWV0YTogTWV0YSwgX3BsYXRmb3JtOiBQbGF0Zm9ybSwgX2NsaXBib2FyZDogQ2xpcGJvYXJkLCBfc2hhcmU6IFNoYXJlU2VydmljZSwgX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX2RvY3VtZW50OiBhbnkpO1xuICAgIC8qKlxuICAgICAqIFNoYXJlIHRoZSBsaW5rXG4gICAgICovXG4gICAgc2hhcmUoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfY3JlYXRlU2hhcmVCdXR0b247XG4gICAgLyoqXG4gICAgICogR2V0IG1ldGEgdGFnIGNvbnRlbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIF9nZXRNZXRhVGFnQ29udGVudDtcbiAgICBwcml2YXRlIF9zaGFyZUJ1dHRvbkNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBfdXJsQ2hhbmdlZDtcbiAgICAvKipcbiAgICAgKiBHZXQgc2hhcmUgcGFyYW1zIGZyb20gbWV0YSB0YWdzIGZpcnN0IGFuZCBmYWxsYmFjayB0byB1c2VyIGlucHV0c1xuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0UGFyYW1zRnJvbU1ldGFUYWdzO1xuICAgIC8qKlxuICAgICAqIEdldCBzaGFyZSBwYXJhbXMgZnJvbSB1c2VyIGlucHV0c1xuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0UGFyYW1zRnJvbUlucHV0cztcbiAgICBwcml2YXRlIG9wZW47XG4gICAgcHJpdmF0ZSBfc2VyaWFsaXplUGFyYW1zO1xufVxuIl19