import { AfterViewInit, DoCheck, ElementRef, KeyValueDiffer, KeyValueDiffers, OnInit } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { CurrencyMaskConfig } from "./currency-mask.config";
import { InputHandler } from "./input.handler";
import * as ɵngcc0 from '@angular/core';
export declare const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any;
export declare class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit {
    private currencyMaskConfig;
    private elementRef;
    private keyValueDiffers;
    options: Partial<CurrencyMaskConfig>;
    inputHandler: InputHandler;
    keyValueDiffer: KeyValueDiffer<any, any>;
    optionsTemplate: CurrencyMaskConfig;
    constructor(currencyMaskConfig: CurrencyMaskConfig, elementRef: ElementRef, keyValueDiffers: KeyValueDiffers);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnInit(): void;
    handleBlur(event: any): void;
    handleCut(event: any): void;
    handleInput(event: any): void;
    handleKeydown(event: any): void;
    handleKeypress(event: any): void;
    handlePaste(event: any): void;
    handleDrop(event: any): void;
    isChromeAndroid(): boolean;
    isReadOnly(): boolean;
    registerOnChange(callbackFunction: Function): void;
    registerOnTouched(callbackFunction: Function): void;
    setDisabledState(value: boolean): void;
    writeValue(value: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CurrencyMaskDirective, [{ optional: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CurrencyMaskDirective, "[currencyMask]", never, { "options": "options"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEtleVZhbHVlRGlmZmVyLCBLZXlWYWx1ZURpZmZlcnMsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3VycmVuY3lNYXNrQ29uZmlnIH0gZnJvbSBcIi4vY3VycmVuY3ktbWFzay5jb25maWdcIjtcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuL2lucHV0LmhhbmRsZXJcIjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IENVUlJFTkNZTUFTS0RJUkVDVElWRV9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIERvQ2hlY2ssIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBjdXJyZW5jeU1hc2tDb25maWc7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUga2V5VmFsdWVEaWZmZXJzO1xuICAgIG9wdGlvbnM6IFBhcnRpYWw8Q3VycmVuY3lNYXNrQ29uZmlnPjtcbiAgICBpbnB1dEhhbmRsZXI6IElucHV0SGFuZGxlcjtcbiAgICBrZXlWYWx1ZURpZmZlcjogS2V5VmFsdWVEaWZmZXI8YW55LCBhbnk+O1xuICAgIG9wdGlvbnNUZW1wbGF0ZTogQ3VycmVuY3lNYXNrQ29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKGN1cnJlbmN5TWFza0NvbmZpZzogQ3VycmVuY3lNYXNrQ29uZmlnLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBrZXlWYWx1ZURpZmZlcnM6IEtleVZhbHVlRGlmZmVycyk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBoYW5kbGVCbHVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUN1dChldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVJbnB1dChldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVLZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUtleXByZXNzKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZVBhc3RlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZURyb3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaXNDaHJvbWVBbmRyb2lkKCk6IGJvb2xlYW47XG4gICAgaXNSZWFkT25seSgpOiBib29sZWFuO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoY2FsbGJhY2tGdW5jdGlvbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGNhbGxiYWNrRnVuY3Rpb246IEZ1bmN0aW9uKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xufVxuIl19