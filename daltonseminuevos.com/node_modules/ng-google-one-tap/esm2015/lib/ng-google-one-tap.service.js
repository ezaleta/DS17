import { Injectable, NgZone } from '@angular/core';
import { Inject } from '@angular/core';
import { CONFIGURATION } from './toke';
import { Subject } from 'rxjs';
export class NgOneTapService {
    constructor(envConfig, ngZone) {
        this.envConfig = envConfig;
        this.ngZone = ngZone;
        this._promtMoment = new Subject();
        this._oneTapCredentialResponse = new Subject();
        this._authUserResponse = new Subject();
    }
    get promtMoment() {
        return this._promtMoment.asObservable();
    }
    get oneTapCredentialResponse() {
        return this._oneTapCredentialResponse.asObservable();
    }
    get authUserResponse() {
        return this._authUserResponse.asObservable();
    }
    tapInitialize(config) {
        window.onload = () => {
            this.tapRender(config);
        };
        if (document.readyState == 'complete') {
            this.tapRender(config);
        }
    }
    tapRender(config) {
        const conf = Object.assign(Object.assign({}, this.envConfig), config);
        if (!!(conf === null || conf === void 0 ? void 0 : conf.disable_exponential_cooldowntime)) {
            document.cookie = 'g_state' + '=;Path=/;';
        }
        window.google.accounts.id.initialize(Object.assign(Object.assign({}, conf), { callback: (auth) => {
                this.ngZone.run(() => {
                    if (!!conf.authvalidate_by_googleapis) {
                        const http = new XMLHttpRequest();
                        const url = `https://oauth2.googleapis.com/tokeninfo?id_token=${auth.credential}`;
                        http.open('GET', url);
                        http.send();
                        http.onreadystatechange = () => {
                            if (http.readyState == 4 && http.status == 200) {
                                this._authUserResponse.next(JSON.parse(http.responseText));
                            }
                        };
                    }
                    this._oneTapCredentialResponse.next(auth);
                });
            } }));
        window.google.accounts.id.prompt((pmt) => {
            this._promtMoment.next(pmt);
        });
    }
    signOut() {
        window.google.accounts.id.disableAutoSelect();
    }
    cancelTheTap() {
        window.google.accounts.id.cancel();
    }
}
NgOneTapService.decorators = [
    { type: Injectable }
];
NgOneTapService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIGURATION,] }] },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZ29vZ2xlLW9uZS10YXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdvb2dsZS1vbmUtdGFwL3NyYy9saWIvbmctZ29vZ2xlLW9uZS10YXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUsvQixNQUFNLE9BQU8sZUFBZTtJQWtCeEIsWUFBMkMsU0FBd0IsRUFDM0QsTUFBYztRQURxQixjQUFTLEdBQVQsU0FBUyxDQUFlO1FBQzNELFdBQU0sR0FBTixNQUFNLENBQVE7UUFqQmQsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBNEIsQ0FBQztRQUN2RCw4QkFBeUIsR0FBRyxJQUFJLE9BQU8sRUFBaUIsQ0FBQztRQUN6RCxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBWSxDQUFDO0lBZTFCLENBQUM7SUFiM0IsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLHdCQUF3QjtRQUN4QixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUtELGFBQWEsQ0FBQyxNQUFzQjtRQUNoQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQTtRQUNELElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsTUFBcUI7UUFDbkMsTUFBTSxJQUFJLG1DQUFPLElBQUksQ0FBQyxTQUFTLEdBQUssTUFBTSxDQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLEVBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLGdDQUFnQyxDQUFBLEVBQUU7WUFDMUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUUsV0FBVyxDQUFDO1NBQzVDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsaUNBQzdCLElBQUksS0FBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNqQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7d0JBQ25DLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7d0JBQ2xDLE1BQU0sR0FBRyxHQUFHLG9EQUFvRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7d0JBQ2xGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ1osSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsRUFBRTs0QkFDM0IsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTtnQ0FDNUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzZCQUM5RDt3QkFDTCxDQUFDLENBQUM7cUJBQ0w7b0JBQ0QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLElBQ0gsQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFlBQVk7UUFDUixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7O1lBakVKLFVBQVU7Ozs0Q0FtQk0sTUFBTSxTQUFDLGFBQWE7WUExQmhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWd1cmF0aW9uLCBjcmVkZW50aWFsUmVzLCBVc2VySW5mbyB9IGZyb20gJy4vbW9kZWwvdGFwLm1vZGVsJztcbmltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDT05GSUdVUkFUSU9OIH0gZnJvbSAnLi90b2tlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb21wdE1vbWVudE5vdGlmaWNhdGlvbiB9IGZyb20gJy4vbW9kZWwvcHJvbXB0bW9tZW50Lm1vZGVsJztcblxuZGVjbGFyZSB2YXIgd2luZG93OiBhbnk7XG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdPbmVUYXBTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX3Byb210TW9tZW50ID0gbmV3IFN1YmplY3Q8UHJvbXB0TW9tZW50Tm90aWZpY2F0aW9uPigpO1xuICAgIHByaXZhdGUgX29uZVRhcENyZWRlbnRpYWxSZXNwb25zZSA9IG5ldyBTdWJqZWN0PGNyZWRlbnRpYWxSZXM+KCk7XG4gICAgcHJpdmF0ZSBfYXV0aFVzZXJSZXNwb25zZSA9IG5ldyBTdWJqZWN0PFVzZXJJbmZvPigpO1xuXG4gICAgZ2V0IHByb210TW9tZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbXRNb21lbnQuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgZ2V0IG9uZVRhcENyZWRlbnRpYWxSZXNwb25zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uZVRhcENyZWRlbnRpYWxSZXNwb25zZS5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgYXV0aFVzZXJSZXNwb25zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhVc2VyUmVzcG9uc2UuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChDT05GSUdVUkFUSU9OKSBwcml2YXRlIGVudkNvbmZpZzogY29uZmlndXJhdGlvbixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7IH1cblxuICAgIHRhcEluaXRpYWxpemUoY29uZmlnPzogY29uZmlndXJhdGlvbikge1xuICAgICAgICB3aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50YXBSZW5kZXIoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB0aGlzLnRhcFJlbmRlcihjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0YXBSZW5kZXIoY29uZmlnOiBjb25maWd1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbmYgPSB7Li4udGhpcy5lbnZDb25maWcsIC4uLmNvbmZpZyB9O1xuICAgICAgICBpZiAoISFjb25mPy5kaXNhYmxlX2V4cG9uZW50aWFsX2Nvb2xkb3dudGltZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ2dfc3RhdGUnICsnPTtQYXRoPS87JztcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuZ29vZ2xlLmFjY291bnRzLmlkLmluaXRpYWxpemUoe1xuICAgICAgICAgICAgLi4uY29uZiwgY2FsbGJhY2s6IChhdXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhY29uZi5hdXRodmFsaWRhdGVfYnlfZ29vZ2xlYXBpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuaW5mbz9pZF90b2tlbj0ke2F1dGguY3JlZGVudGlhbH1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5zZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHR0cC5yZWFkeVN0YXRlID09IDQgJiYgaHR0cC5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1dGhVc2VyUmVzcG9uc2UubmV4dChKU09OLnBhcnNlKGh0dHAucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbmVUYXBDcmVkZW50aWFsUmVzcG9uc2UubmV4dChhdXRoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5nb29nbGUuYWNjb3VudHMuaWQucHJvbXB0KChwbXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb210TW9tZW50Lm5leHQocG10KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2lnbk91dCgpIHtcbiAgICAgICAgd2luZG93Lmdvb2dsZS5hY2NvdW50cy5pZC5kaXNhYmxlQXV0b1NlbGVjdCgpO1xuICAgIH1cblxuICAgIGNhbmNlbFRoZVRhcCgpIHtcbiAgICAgICAgd2luZG93Lmdvb2dsZS5hY2NvdW50cy5pZC5jYW5jZWwoKTtcbiAgICB9XG59XG4iXX0=