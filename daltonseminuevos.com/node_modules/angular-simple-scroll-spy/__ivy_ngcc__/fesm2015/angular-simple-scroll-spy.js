import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class ScrollSpyContentDirective {
    /**
     * @param {?} _element
     */
    constructor(_element) {
        this._element = _element;
        this.sscCurrentContentChange = new EventEmitter();
        this.sscDirection = "row";
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onScroll(event) {
        /** @type {?} */
        let nowContent = Array.from(this._element.nativeElement.children)
            .filter(child => this.target === child.tagName)
            .reverse()
            .find(child => this.sscDirection === "row" ?
            (child.offsetTop - event.target.offsetTop) <= event.target.scrollTop :
            (child.offsetLeft - event.target.offsetLeft) <= event.target.scrollLeft);
        if (!nowContent)
            return;
        if (nowContent.id !== this._currentContent) {
            this._currentContent = nowContent.id;
            this.sscCurrentContentChange.emit(this._currentContent);
        }
    }
}
ScrollSpyContentDirective.ɵfac = function ScrollSpyContentDirective_Factory(t) { return new (t || ScrollSpyContentDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ScrollSpyContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyContentDirective, selectors: [["", "scrollSpyContent", ""]], hostBindings: function ScrollSpyContentDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function ScrollSpyContentDirective_scroll_HostBindingHandler($event) { return ctx.onScroll($event); });
    } }, inputs: { sscDirection: "sscDirection", target: ["scrollSpyContent", "target"], sscCurrentContent: "sscCurrentContent" }, outputs: { sscCurrentContentChange: "sscCurrentContentChange" } });
/** @nocollapse */
ScrollSpyContentDirective.ctorParameters = () => [
    { type: ElementRef }
];
ScrollSpyContentDirective.propDecorators = {
    target: [{ type: Input, args: ['scrollSpyContent',] }],
    sscCurrentContent: [{ type: Input }],
    sscCurrentContentChange: [{ type: Output }],
    sscDirection: [{ type: Input }],
    onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyContentDirective, [{
        type: Directive,
        args: [{
                selector: '[scrollSpyContent]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { sscCurrentContentChange: [{
            type: Output
        }], sscDirection: [{
            type: Input
        }], onScroll: [{
            type: HostListener,
            args: ['scroll', ['$event']]
        }], target: [{
            type: Input,
            args: ['scrollSpyContent']
        }], sscCurrentContent: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ScrollSpyMenuDirective {
    /**
     * @param {?} _element
     * @param {?} _renderer
     */
    constructor(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.ssmActiveClassName = "active";
        this.ssmScrollBehavior = "smooth";
        this.ssmScrollBlock = "start";
        this.ssmScrollInline = "nearest";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ssmCurrentContent(value) {
        if (this.contentId === value) {
            this._renderer.addClass(this._element.nativeElement, this.ssmActiveClassName);
        }
        else {
            this._renderer.removeClass(this._element.nativeElement, this.ssmActiveClassName);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        document.querySelector(`#${this.contentId}`).scrollIntoView({
            behavior: this.ssmScrollBehavior,
            block: this.ssmScrollBlock,
            inline: this.ssmScrollInline
        });
    }
}
ScrollSpyMenuDirective.ɵfac = function ScrollSpyMenuDirective_Factory(t) { return new (t || ScrollSpyMenuDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ScrollSpyMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyMenuDirective, selectors: [["", "scrollSpyMenu", ""]], hostBindings: function ScrollSpyMenuDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ScrollSpyMenuDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { ssmActiveClassName: "ssmActiveClassName", ssmScrollBehavior: "ssmScrollBehavior", ssmScrollBlock: "ssmScrollBlock", ssmScrollInline: "ssmScrollInline", ssmCurrentContent: "ssmCurrentContent", contentId: ["scrollSpyMenu", "contentId"] } });
/** @nocollapse */
ScrollSpyMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ScrollSpyMenuDirective.propDecorators = {
    contentId: [{ type: Input, args: ['scrollSpyMenu',] }],
    ssmActiveClassName: [{ type: Input }],
    ssmCurrentContent: [{ type: Input }],
    ssmScrollBehavior: [{ type: Input }],
    ssmScrollBlock: [{ type: Input }],
    ssmScrollInline: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyMenuDirective, [{
        type: Directive,
        args: [{
                selector: '[scrollSpyMenu]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { ssmActiveClassName: [{
            type: Input
        }], ssmScrollBehavior: [{
            type: Input
        }], ssmScrollBlock: [{
            type: Input
        }], ssmScrollInline: [{
            type: Input
        }], ssmCurrentContent: [{
            type: Input
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], contentId: [{
            type: Input,
            args: ['scrollSpyMenu']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SimpleScrollSpyModule {
}
SimpleScrollSpyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SimpleScrollSpyModule });
SimpleScrollSpyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SimpleScrollSpyModule_Factory(t) { return new (t || SimpleScrollSpyModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SimpleScrollSpyModule, { declarations: [ScrollSpyContentDirective,
        ScrollSpyMenuDirective], exports: [ScrollSpyContentDirective,
        ScrollSpyMenuDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleScrollSpyModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    ScrollSpyContentDirective,
                    ScrollSpyMenuDirective
                ],
                exports: [
                    ScrollSpyContentDirective,
                    ScrollSpyMenuDirective
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SimpleScrollSpyModule, ScrollSpyContentDirective as ɵa, ScrollSpyMenuDirective as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5LWNvbnRlbnQuZGlyZWN0aXZlLnRzIiwibmc6L2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5LW1lbnUuZGlyZWN0aXZlLnRzIiwibmc6L2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFFWTtBQUNOO0FBRUw7QUFDRCxJQWNFLFlBQW9CLFFBQW9CO0FBQUksUUFBeEIsYUFBUSxHQUFSLFFBQVEsQ0FBWTtBQUFDLHVDQUhFLElBQUksWUFBWSxFQUFVO0FBQ3ZFLDRCQUFtRCxLQUFLO0FBQ3hELEtBQzhDO0FBQzlDO0FBQ087QUFBd0I7QUFDbkI7QUFBUSxJQUFsQixRQUFRLENBQUMsS0FBVTtBQUNyQjtBQUF5QixRQUFyQixJQUFJLFVBQVUsR0FBUSxLQUFLLENBQUMsSUFBSSxDQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUMvRSxhQUFPLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ3JELGFBQU8sT0FBTyxFQUFFO0FBQ2hCLGFBQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLEtBQUs7QUFDaEQsWUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTO0FBQzVFLFlBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMs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LGtCQUN2QixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7OzBCQUNLO0FBQUM7QUFBQztBQUFJO0FBQ0w7QUFBa0U7QUFBSTtBQUFDO0FBQUk7QUFBa0M7QUFBa0U7QUFBSTtBQUFDOztBRmpCQSxBQW9CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQTVCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBVEEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQ3RCQSxBQTJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFiQSxBQUFBLEFBU0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFaQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUE1QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVJBLEFBQUEsQUFHQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQVFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUM3QkEsQUFJQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT3V0cHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsU3B5Q29udGVudF0nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweUNvbnRlbnREaXJlY3RpdmUge1xuICBASW5wdXQoJ3Njcm9sbFNweUNvbnRlbnQnKSBwdWJsaWMgdGFyZ2V0O1xuXG4gIHByaXZhdGUgX2N1cnJlbnRDb250ZW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzc2NDdXJyZW50Q29udGVudDogc3RyaW5nO1xuICBAT3V0cHV0KCkgcHVibGljIHNzY0N1cnJlbnRDb250ZW50Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBJbnB1dCgpIHB1YmxpYyBzc2NEaXJlY3Rpb246IFwicm93XCIgfCBcImNvbG11blwiID0gXCJyb3dcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3Njcm9sbCcsIFsnJGV2ZW50J10pXG4gIG9uU2Nyb2xsKGV2ZW50OiBhbnkpIHtcbiAgICBsZXQgbm93Q29udGVudDogYW55ID0gQXJyYXkuZnJvbTxhbnk+KHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbilcbiAgICAgIC5maWx0ZXIoY2hpbGQgPT4gdGhpcy50YXJnZXQgPT09IGNoaWxkLnRhZ05hbWUpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuZmluZChjaGlsZCA9PiB0aGlzLnNzY0RpcmVjdGlvbiA9PT0gXCJyb3dcIiA/XG4gICAgICAgIChjaGlsZC5vZmZzZXRUb3AgLSBldmVudC50YXJnZXQub2Zmc2V0VG9wKSA8PSBldmVudC50YXJnZXQuc2Nyb2xsVG9wIDpcbiAgICAgICAgKGNoaWxkLm9mZnNldExlZnQgLSBldmVudC50YXJnZXQub2Zmc2V0TGVmdCkgPD0gZXZlbnQudGFyZ2V0LnNjcm9sbExlZnRcbiAgICAgICk7XG4gICAgaWYgKCFub3dDb250ZW50KSByZXR1cm47XG5cbiAgICBpZiAobm93Q29udGVudC5pZCAhPT0gdGhpcy5fY3VycmVudENvbnRlbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRDb250ZW50ID0gbm93Q29udGVudC5pZDtcbiAgICAgIHRoaXMuc3NjQ3VycmVudENvbnRlbnRDaGFuZ2UuZW1pdCh0aGlzLl9jdXJyZW50Q29udGVudCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIFJlbmRlcmVyMlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Njcm9sbFNweU1lbnVdJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlNZW51RGlyZWN0aXZlIHtcbiAgQElucHV0KCdzY3JvbGxTcHlNZW51JykgcHVibGljIGNvbnRlbnRJZDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBzc21BY3RpdmVDbGFzc05hbWUgPSBcImFjdGl2ZVwiO1xuICBASW5wdXQoKSBzZXQgc3NtQ3VycmVudENvbnRlbnQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmNvbnRlbnRJZCA9PT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy5zc21BY3RpdmVDbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuc3NtQWN0aXZlQ2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBwdWJsaWMgc3NtU2Nyb2xsQmVoYXZpb3I6IFNjcm9sbEJlaGF2aW9yID0gXCJzbW9vdGhcIjtcbiAgQElucHV0KCkgcHVibGljIHNzbVNjcm9sbEJsb2NrOiBTY3JvbGxMb2dpY2FsUG9zaXRpb24gPSBcInN0YXJ0XCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzc21TY3JvbGxJbmxpbmU6IFNjcm9sbExvZ2ljYWxQb3NpdGlvbiA9IFwibmVhcmVzdFwiO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLmNvbnRlbnRJZH1gKS5zY3JvbGxJbnRvVmlldyh7XG4gICAgICBiZWhhdmlvcjogdGhpcy5zc21TY3JvbGxCZWhhdmlvcixcbiAgICAgIGJsb2NrOiB0aGlzLnNzbVNjcm9sbEJsb2NrLFxuICAgICAgaW5saW5lOiB0aGlzLnNzbVNjcm9sbElubGluZVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlfSBmcm9tIFwiLi9zaW1wbGUtc2Nyb2xsLXNweS1jb250ZW50LmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHtTY3JvbGxTcHlNZW51RGlyZWN0aXZlfSBmcm9tIFwiLi9zaW1wbGUtc2Nyb2xsLXNweS1tZW51LmRpcmVjdGl2ZVwiO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNjcm9sbFNweUNvbnRlbnREaXJlY3RpdmUsXG4gICAgU2Nyb2xsU3B5TWVudURpcmVjdGl2ZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgU2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZSxcbiAgICBTY3JvbGxTcHlNZW51RGlyZWN0aXZlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU2ltcGxlU2Nyb2xsU3B5TW9kdWxlIHsgfVxuIl19