import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ScrollSpyContentDirective {
    /**
     * @param {?} _element
     */
    constructor(_element) {
        this._element = _element;
        this.sscCurrentContentChange = new EventEmitter();
        this.sscDirection = "row";
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onScroll(event) {
        /** @type {?} */
        let nowContent = Array.from(this._element.nativeElement.children)
            .filter(child => this.target === child.tagName)
            .reverse()
            .find(child => this.sscDirection === "row" ?
            (child.offsetTop - event.target.offsetTop) <= event.target.scrollTop :
            (child.offsetLeft - event.target.offsetLeft) <= event.target.scrollLeft);
        if (!nowContent)
            return;
        if (nowContent.id !== this._currentContent) {
            this._currentContent = nowContent.id;
            this.sscCurrentContentChange.emit(this._currentContent);
        }
    }
}
ScrollSpyContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scrollSpyContent]'
            },] },
];
/** @nocollapse */
ScrollSpyContentDirective.ctorParameters = () => [
    { type: ElementRef }
];
ScrollSpyContentDirective.propDecorators = {
    target: [{ type: Input, args: ['scrollSpyContent',] }],
    sscCurrentContent: [{ type: Input }],
    sscCurrentContentChange: [{ type: Output }],
    sscDirection: [{ type: Input }],
    onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ScrollSpyMenuDirective {
    /**
     * @param {?} _element
     * @param {?} _renderer
     */
    constructor(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.ssmActiveClassName = "active";
        this.ssmScrollBehavior = "smooth";
        this.ssmScrollBlock = "start";
        this.ssmScrollInline = "nearest";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ssmCurrentContent(value) {
        if (this.contentId === value) {
            this._renderer.addClass(this._element.nativeElement, this.ssmActiveClassName);
        }
        else {
            this._renderer.removeClass(this._element.nativeElement, this.ssmActiveClassName);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        document.querySelector(`#${this.contentId}`).scrollIntoView({
            behavior: this.ssmScrollBehavior,
            block: this.ssmScrollBlock,
            inline: this.ssmScrollInline
        });
    }
}
ScrollSpyMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scrollSpyMenu]'
            },] },
];
/** @nocollapse */
ScrollSpyMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ScrollSpyMenuDirective.propDecorators = {
    contentId: [{ type: Input, args: ['scrollSpyMenu',] }],
    ssmActiveClassName: [{ type: Input }],
    ssmCurrentContent: [{ type: Input }],
    ssmScrollBehavior: [{ type: Input }],
    ssmScrollBlock: [{ type: Input }],
    ssmScrollInline: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SimpleScrollSpyModule {
}
SimpleScrollSpyModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [
                    ScrollSpyContentDirective,
                    ScrollSpyMenuDirective
                ],
                exports: [
                    ScrollSpyContentDirective,
                    ScrollSpyMenuDirective
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SimpleScrollSpyModule, ScrollSpyContentDirective as ɵa, ScrollSpyMenuDirective as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS9saWIvc2ltcGxlLXNjcm9sbC1zcHktY29udGVudC5kaXJlY3RpdmUudHMiLCJuZzovL2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5LW1lbnUuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLXNpbXBsZS1zY3JvbGwtc3B5L2xpYi9zaW1wbGUtc2Nyb2xsLXNweS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Njcm9sbFNweUNvbnRlbnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlIHtcbiAgQElucHV0KCdzY3JvbGxTcHlDb250ZW50JykgcHVibGljIHRhcmdldDtcblxuICBwcml2YXRlIF9jdXJyZW50Q29udGVudDogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgc3NjQ3VycmVudENvbnRlbnQ6IHN0cmluZztcbiAgQE91dHB1dCgpIHB1YmxpYyBzc2NDdXJyZW50Q29udGVudENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBASW5wdXQoKSBwdWJsaWMgc3NjRGlyZWN0aW9uOiBcInJvd1wiIHwgXCJjb2xtdW5cIiA9IFwicm93XCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge31cblxuICBASG9zdExpc3RlbmVyKCdzY3JvbGwnLCBbJyRldmVudCddKVxuICBvblNjcm9sbChldmVudDogYW55KSB7XG4gICAgbGV0IG5vd0NvbnRlbnQ6IGFueSA9IEFycmF5LmZyb208YW55Pih0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICAuZmlsdGVyKGNoaWxkID0+IHRoaXMudGFyZ2V0ID09PSBjaGlsZC50YWdOYW1lKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbmQoY2hpbGQgPT4gdGhpcy5zc2NEaXJlY3Rpb24gPT09IFwicm93XCIgP1xuICAgICAgICAoY2hpbGQub2Zmc2V0VG9wIC0gZXZlbnQudGFyZ2V0Lm9mZnNldFRvcCkgPD0gZXZlbnQudGFyZ2V0LnNjcm9sbFRvcCA6XG4gICAgICAgIChjaGlsZC5vZmZzZXRMZWZ0IC0gZXZlbnQudGFyZ2V0Lm9mZnNldExlZnQpIDw9IGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0XG4gICAgICApO1xuICAgIGlmICghbm93Q29udGVudCkgcmV0dXJuO1xuXG4gICAgaWYgKG5vd0NvbnRlbnQuaWQgIT09IHRoaXMuX2N1cnJlbnRDb250ZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50Q29udGVudCA9IG5vd0NvbnRlbnQuaWQ7XG4gICAgICB0aGlzLnNzY0N1cnJlbnRDb250ZW50Q2hhbmdlLmVtaXQodGhpcy5fY3VycmVudENvbnRlbnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzY3JvbGxTcHlNZW51XSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5TWVudURpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsU3B5TWVudScpIHB1YmxpYyBjb250ZW50SWQ6IHN0cmluZztcblxuICBASW5wdXQoKSBwdWJsaWMgc3NtQWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIjtcbiAgQElucHV0KCkgc2V0IHNzbUN1cnJlbnRDb250ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jb250ZW50SWQgPT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuc3NtQWN0aXZlQ2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnNzbUFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgcHVibGljIHNzbVNjcm9sbEJlaGF2aW9yOiBTY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzc21TY3JvbGxCbG9jazogU2Nyb2xsTG9naWNhbFBvc2l0aW9uID0gXCJzdGFydFwiO1xuICBASW5wdXQoKSBwdWJsaWMgc3NtU2Nyb2xsSW5saW5lOiBTY3JvbGxMb2dpY2FsUG9zaXRpb24gPSBcIm5lYXJlc3RcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhldmVudDogYW55KSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5jb250ZW50SWR9YCkuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgYmVoYXZpb3I6IHRoaXMuc3NtU2Nyb2xsQmVoYXZpb3IsXG4gICAgICBibG9jazogdGhpcy5zc21TY3JvbGxCbG9jayxcbiAgICAgIGlubGluZTogdGhpcy5zc21TY3JvbGxJbmxpbmVcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZX0gZnJvbSBcIi4vc2ltcGxlLXNjcm9sbC1zcHktY29udGVudC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7U2Nyb2xsU3B5TWVudURpcmVjdGl2ZX0gZnJvbSBcIi4vc2ltcGxlLXNjcm9sbC1zcHktbWVudS5kaXJlY3RpdmVcIjtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlLFxuICAgIFNjcm9sbFNweU1lbnVEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFNjcm9sbFNweUNvbnRlbnREaXJlY3RpdmUsXG4gICAgU2Nyb2xsU3B5TWVudURpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNpbXBsZVNjcm9sbFNweU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztJQW9CRSxZQUFvQixRQUFvQjtRQUFwQixhQUFRLEdBQVIsUUFBUSxDQUFZO3VDQUhHLElBQUksWUFBWSxFQUFVOzRCQUNwQixLQUFLO0tBRVY7Ozs7O0lBRzVDLFFBQVEsQ0FBQyxLQUFVOztRQUNqQixJQUFJLFVBQVUsR0FBUSxLQUFLLENBQUMsSUFBSSxDQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzthQUN4RSxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUM5QyxPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssS0FBSztZQUN4QyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTO1lBQ3BFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FDeEUsQ0FBQztRQUNKLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUV4QixJQUFJLFVBQVUsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUMxQyxJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDekQ7S0FDRjs7O1lBNUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2FBQy9COzs7O1lBVEMsVUFBVTs7O3FCQVdULEtBQUssU0FBQyxrQkFBa0I7Z0NBR3hCLEtBQUs7c0NBQ0wsTUFBTTsyQkFDTixLQUFLO3VCQUlMLFlBQVksU0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7QUN0QnBDOzs7OztJQTJCRSxZQUFvQixRQUFvQixFQUFVLFNBQW9CO1FBQWxELGFBQVEsR0FBUixRQUFRLENBQVk7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO2tDQWJqQyxRQUFRO2lDQVNPLFFBQVE7OEJBQ0osT0FBTzsrQkFDTixTQUFTO0tBRVE7Ozs7O0lBWjFFLElBQWEsaUJBQWlCLENBQUMsS0FBYTtRQUMxQyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO1lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQy9FO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNsRjtLQUNGOzs7OztJQVNELE9BQU8sQ0FBQyxLQUFVO1FBQ2hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUM7WUFDMUQsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDaEMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQzFCLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZTtTQUM3QixDQUFDLENBQUM7S0FDSjs7O1lBNUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2FBQzVCOzs7O1lBUkMsVUFBVTtZQUdWLFNBQVM7Ozt3QkFPUixLQUFLLFNBQUMsZUFBZTtpQ0FFckIsS0FBSztnQ0FDTCxLQUFLO2dDQVFMLEtBQUs7NkJBQ0wsS0FBSzs4QkFDTCxLQUFLO3NCQUlMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7QUM3Qm5DOzs7WUFJQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQ1I7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLHlCQUF5QjtvQkFDekIsc0JBQXNCO2lCQUN2QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AseUJBQXlCO29CQUN6QixzQkFBc0I7aUJBQ3ZCO2FBQ0Y7Ozs7Ozs7Ozs7Ozs7OzsifQ==