import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ScrollSpyContentDirective = /** @class */ (function () {
    function ScrollSpyContentDirective(_element) {
        this._element = _element;
        this.sscCurrentContentChange = new EventEmitter();
        this.sscDirection = "row";
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ScrollSpyContentDirective.prototype.onScroll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var nowContent = Array.from(this._element.nativeElement.children)
            .filter(function (child) { return _this.target === child.tagName; })
            .reverse()
            .find(function (child) { return _this.sscDirection === "row" ?
            (child.offsetTop - event.target.offsetTop) <= event.target.scrollTop :
            (child.offsetLeft - event.target.offsetLeft) <= event.target.scrollLeft; });
        if (!nowContent)
            return;
        if (nowContent.id !== this._currentContent) {
            this._currentContent = nowContent.id;
            this.sscCurrentContentChange.emit(this._currentContent);
        }
    };
    ScrollSpyContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scrollSpyContent]'
                },] },
    ];
    /** @nocollapse */
    ScrollSpyContentDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ScrollSpyContentDirective.propDecorators = {
        target: [{ type: Input, args: ['scrollSpyContent',] }],
        sscCurrentContent: [{ type: Input }],
        sscCurrentContentChange: [{ type: Output }],
        sscDirection: [{ type: Input }],
        onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return ScrollSpyContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ScrollSpyMenuDirective = /** @class */ (function () {
    function ScrollSpyMenuDirective(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.ssmActiveClassName = "active";
        this.ssmScrollBehavior = "smooth";
        this.ssmScrollBlock = "start";
        this.ssmScrollInline = "nearest";
    }
    Object.defineProperty(ScrollSpyMenuDirective.prototype, "ssmCurrentContent", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.contentId === value) {
                this._renderer.addClass(this._element.nativeElement, this.ssmActiveClassName);
            }
            else {
                this._renderer.removeClass(this._element.nativeElement, this.ssmActiveClassName);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ScrollSpyMenuDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        document.querySelector("#" + this.contentId).scrollIntoView({
            behavior: this.ssmScrollBehavior,
            block: this.ssmScrollBlock,
            inline: this.ssmScrollInline
        });
    };
    ScrollSpyMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scrollSpyMenu]'
                },] },
    ];
    /** @nocollapse */
    ScrollSpyMenuDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ScrollSpyMenuDirective.propDecorators = {
        contentId: [{ type: Input, args: ['scrollSpyMenu',] }],
        ssmActiveClassName: [{ type: Input }],
        ssmCurrentContent: [{ type: Input }],
        ssmScrollBehavior: [{ type: Input }],
        ssmScrollBlock: [{ type: Input }],
        ssmScrollInline: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return ScrollSpyMenuDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SimpleScrollSpyModule = /** @class */ (function () {
    function SimpleScrollSpyModule() {
    }
    SimpleScrollSpyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        ScrollSpyContentDirective,
                        ScrollSpyMenuDirective
                    ],
                    exports: [
                        ScrollSpyContentDirective,
                        ScrollSpyMenuDirective
                    ]
                },] },
    ];
    return SimpleScrollSpyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SimpleScrollSpyModule, ScrollSpyContentDirective as ɵa, ScrollSpyMenuDirective as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS9saWIvc2ltcGxlLXNjcm9sbC1zcHktY29udGVudC5kaXJlY3RpdmUudHMiLCJuZzovL2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5LW1lbnUuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLXNpbXBsZS1zY3JvbGwtc3B5L2xpYi9zaW1wbGUtc2Nyb2xsLXNweS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Njcm9sbFNweUNvbnRlbnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlIHtcbiAgQElucHV0KCdzY3JvbGxTcHlDb250ZW50JykgcHVibGljIHRhcmdldDtcblxuICBwcml2YXRlIF9jdXJyZW50Q29udGVudDogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgc3NjQ3VycmVudENvbnRlbnQ6IHN0cmluZztcbiAgQE91dHB1dCgpIHB1YmxpYyBzc2NDdXJyZW50Q29udGVudENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBASW5wdXQoKSBwdWJsaWMgc3NjRGlyZWN0aW9uOiBcInJvd1wiIHwgXCJjb2xtdW5cIiA9IFwicm93XCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge31cblxuICBASG9zdExpc3RlbmVyKCdzY3JvbGwnLCBbJyRldmVudCddKVxuICBvblNjcm9sbChldmVudDogYW55KSB7XG4gICAgbGV0IG5vd0NvbnRlbnQ6IGFueSA9IEFycmF5LmZyb208YW55Pih0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICAuZmlsdGVyKGNoaWxkID0+IHRoaXMudGFyZ2V0ID09PSBjaGlsZC50YWdOYW1lKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbmQoY2hpbGQgPT4gdGhpcy5zc2NEaXJlY3Rpb24gPT09IFwicm93XCIgP1xuICAgICAgICAoY2hpbGQub2Zmc2V0VG9wIC0gZXZlbnQudGFyZ2V0Lm9mZnNldFRvcCkgPD0gZXZlbnQudGFyZ2V0LnNjcm9sbFRvcCA6XG4gICAgICAgIChjaGlsZC5vZmZzZXRMZWZ0IC0gZXZlbnQudGFyZ2V0Lm9mZnNldExlZnQpIDw9IGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0XG4gICAgICApO1xuICAgIGlmICghbm93Q29udGVudCkgcmV0dXJuO1xuXG4gICAgaWYgKG5vd0NvbnRlbnQuaWQgIT09IHRoaXMuX2N1cnJlbnRDb250ZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50Q29udGVudCA9IG5vd0NvbnRlbnQuaWQ7XG4gICAgICB0aGlzLnNzY0N1cnJlbnRDb250ZW50Q2hhbmdlLmVtaXQodGhpcy5fY3VycmVudENvbnRlbnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzY3JvbGxTcHlNZW51XSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5TWVudURpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsU3B5TWVudScpIHB1YmxpYyBjb250ZW50SWQ6IHN0cmluZztcblxuICBASW5wdXQoKSBwdWJsaWMgc3NtQWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIjtcbiAgQElucHV0KCkgc2V0IHNzbUN1cnJlbnRDb250ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jb250ZW50SWQgPT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuc3NtQWN0aXZlQ2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnNzbUFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgcHVibGljIHNzbVNjcm9sbEJlaGF2aW9yOiBTY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gIEBJbnB1dCgpIHB1YmxpYyBzc21TY3JvbGxCbG9jazogU2Nyb2xsTG9naWNhbFBvc2l0aW9uID0gXCJzdGFydFwiO1xuICBASW5wdXQoKSBwdWJsaWMgc3NtU2Nyb2xsSW5saW5lOiBTY3JvbGxMb2dpY2FsUG9zaXRpb24gPSBcIm5lYXJlc3RcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhldmVudDogYW55KSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5jb250ZW50SWR9YCkuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgYmVoYXZpb3I6IHRoaXMuc3NtU2Nyb2xsQmVoYXZpb3IsXG4gICAgICBibG9jazogdGhpcy5zc21TY3JvbGxCbG9jayxcbiAgICAgIGlubGluZTogdGhpcy5zc21TY3JvbGxJbmxpbmVcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZX0gZnJvbSBcIi4vc2ltcGxlLXNjcm9sbC1zcHktY29udGVudC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7U2Nyb2xsU3B5TWVudURpcmVjdGl2ZX0gZnJvbSBcIi4vc2ltcGxlLXNjcm9sbC1zcHktbWVudS5kaXJlY3RpdmVcIjtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlLFxuICAgIFNjcm9sbFNweU1lbnVEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFNjcm9sbFNweUNvbnRlbnREaXJlY3RpdmUsXG4gICAgU2Nyb2xsU3B5TWVudURpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNpbXBsZVNjcm9sbFNweU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtJQW9CRSxtQ0FBb0IsUUFBb0I7UUFBcEIsYUFBUSxHQUFSLFFBQVEsQ0FBWTt1Q0FIRyxJQUFJLFlBQVksRUFBVTs0QkFDcEIsS0FBSztLQUVWOzs7OztJQUc1Qyw0Q0FBUTs7OztJQURSLFVBQ1MsS0FBVTtRQURuQixpQkFlQzs7UUFiQyxJQUFJLFVBQVUsR0FBUSxLQUFLLENBQUMsSUFBSSxDQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzthQUN4RSxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxPQUFPLEdBQUEsQ0FBQzthQUM5QyxPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxLQUFLLEtBQUs7WUFDeEMsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUztZQUNwRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUEsQ0FDeEUsQ0FBQztRQUNKLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUV4QixJQUFJLFVBQVUsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUMxQyxJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDekQ7S0FDRjs7Z0JBNUJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2lCQUMvQjs7OztnQkFUQyxVQUFVOzs7eUJBV1QsS0FBSyxTQUFDLGtCQUFrQjtvQ0FHeEIsS0FBSzswQ0FDTCxNQUFNOytCQUNOLEtBQUs7MkJBSUwsWUFBWSxTQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7b0NBdEJwQzs7Ozs7OztBQ0FBO0lBMkJFLGdDQUFvQixRQUFvQixFQUFVLFNBQW9CO1FBQWxELGFBQVEsR0FBUixRQUFRLENBQVk7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO2tDQWJqQyxRQUFRO2lDQVNPLFFBQVE7OEJBQ0osT0FBTzsrQkFDTixTQUFTO0tBRVE7SUFaMUUsc0JBQWEscURBQWlCOzs7OztRQUE5QixVQUErQixLQUFhO1lBQzFDLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQy9FO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ2xGO1NBQ0Y7OztPQUFBOzs7OztJQVNELHdDQUFPOzs7O0lBRFAsVUFDUSxLQUFVO1FBQ2hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBSSxJQUFJLENBQUMsU0FBVyxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQzFELFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1lBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsY0FBYztZQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWU7U0FDN0IsQ0FBQyxDQUFDO0tBQ0o7O2dCQTVCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7Ozs7Z0JBUkMsVUFBVTtnQkFHVixTQUFTOzs7NEJBT1IsS0FBSyxTQUFDLGVBQWU7cUNBRXJCLEtBQUs7b0NBQ0wsS0FBSztvQ0FRTCxLQUFLO2lDQUNMLEtBQUs7a0NBQ0wsS0FBSzswQkFJTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztpQ0E3Qm5DOzs7Ozs7O0FDQUE7Ozs7Z0JBSUMsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUNSO29CQUNELFlBQVksRUFBRTt3QkFDWix5QkFBeUI7d0JBQ3pCLHNCQUFzQjtxQkFDdkI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLHlCQUF5Qjt3QkFDekIsc0JBQXNCO3FCQUN2QjtpQkFDRjs7Z0NBZkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==