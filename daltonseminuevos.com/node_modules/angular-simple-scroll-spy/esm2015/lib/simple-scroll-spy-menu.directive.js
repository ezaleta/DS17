/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
export class ScrollSpyMenuDirective {
    /**
     * @param {?} _element
     * @param {?} _renderer
     */
    constructor(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this.ssmActiveClassName = "active";
        this.ssmScrollBehavior = "smooth";
        this.ssmScrollBlock = "start";
        this.ssmScrollInline = "nearest";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ssmCurrentContent(value) {
        if (this.contentId === value) {
            this._renderer.addClass(this._element.nativeElement, this.ssmActiveClassName);
        }
        else {
            this._renderer.removeClass(this._element.nativeElement, this.ssmActiveClassName);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        document.querySelector(`#${this.contentId}`).scrollIntoView({
            behavior: this.ssmScrollBehavior,
            block: this.ssmScrollBlock,
            inline: this.ssmScrollInline
        });
    }
}
ScrollSpyMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scrollSpyMenu]'
            },] },
];
/** @nocollapse */
ScrollSpyMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ScrollSpyMenuDirective.propDecorators = {
    contentId: [{ type: Input, args: ['scrollSpyMenu',] }],
    ssmActiveClassName: [{ type: Input }],
    ssmCurrentContent: [{ type: Input }],
    ssmScrollBehavior: [{ type: Input }],
    ssmScrollBlock: [{ type: Input }],
    ssmScrollInline: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ScrollSpyMenuDirective.prototype.contentId;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype.ssmActiveClassName;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype.ssmScrollBehavior;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype.ssmScrollBlock;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype.ssmScrollInline;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype._element;
    /** @type {?} */
    ScrollSpyMenuDirective.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXNjcm9sbC1zcHktbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNpbXBsZS1zY3JvbGwtc3B5LyIsInNvdXJjZXMiOlsibGliL3NpbXBsZS1zY3JvbGwtc3B5LW1lbnUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUt2QixNQUFNOzs7OztJQWdCSixZQUFvQixRQUFvQixFQUFVLFNBQW9CO1FBQWxELGFBQVEsR0FBUixRQUFRLENBQVk7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO2tDQWJqQyxRQUFRO2lDQVNPLFFBQVE7OEJBQ0osT0FBTzsrQkFDTixTQUFTO0tBRVE7Ozs7O0lBWjFFLElBQWEsaUJBQWlCLENBQUMsS0FBYTtRQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDL0U7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2xGO0tBQ0Y7Ozs7O0lBU0QsT0FBTyxDQUFDLEtBQVU7UUFDaEIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQztZQUMxRCxRQUFRLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlO1NBQzdCLENBQUMsQ0FBQztLQUNKOzs7WUE1QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7Ozs7WUFSQyxVQUFVO1lBR1YsU0FBUzs7O3dCQU9SLEtBQUssU0FBQyxlQUFlO2lDQUVyQixLQUFLO2dDQUNMLEtBQUs7Z0NBUUwsS0FBSzs2QkFDTCxLQUFLOzhCQUNMLEtBQUs7c0JBSUwsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsU3B5TWVudV0nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweU1lbnVEaXJlY3RpdmUge1xuICBASW5wdXQoJ3Njcm9sbFNweU1lbnUnKSBwdWJsaWMgY29udGVudElkOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgcHVibGljIHNzbUFjdGl2ZUNsYXNzTmFtZSA9IFwiYWN0aXZlXCI7XG4gIEBJbnB1dCgpIHNldCBzc21DdXJyZW50Q29udGVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuY29udGVudElkID09PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnNzbUFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy5zc21BY3RpdmVDbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIHB1YmxpYyBzc21TY3JvbGxCZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IgPSBcInNtb290aFwiO1xuICBASW5wdXQoKSBwdWJsaWMgc3NtU2Nyb2xsQmxvY2s6IFNjcm9sbExvZ2ljYWxQb3NpdGlvbiA9IFwic3RhcnRcIjtcbiAgQElucHV0KCkgcHVibGljIHNzbVNjcm9sbElubGluZTogU2Nyb2xsTG9naWNhbFBvc2l0aW9uID0gXCJuZWFyZXN0XCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIG9uQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuY29udGVudElkfWApLnNjcm9sbEludG9WaWV3KHtcbiAgICAgIGJlaGF2aW9yOiB0aGlzLnNzbVNjcm9sbEJlaGF2aW9yLFxuICAgICAgYmxvY2s6IHRoaXMuc3NtU2Nyb2xsQmxvY2ssXG4gICAgICBpbmxpbmU6IHRoaXMuc3NtU2Nyb2xsSW5saW5lXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==