(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-simple-scroll-spy', ['exports', '@angular/core'], factory) :
    (factory((global['angular-simple-scroll-spy'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ScrollSpyContentDirective = (function () {
        function ScrollSpyContentDirective(_element) {
            this._element = _element;
            this.sscCurrentContentChange = new core.EventEmitter();
            this.sscDirection = "row";
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ScrollSpyContentDirective.prototype.onScroll = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                /** @type {?} */
                var nowContent = Array.from(this._element.nativeElement.children)
                    .filter(function (child) { return _this.target === child.tagName; })
                    .reverse()
                    .find(function (child) {
                    return _this.sscDirection === "row" ?
                        (child.offsetTop - event.target.offsetTop) <= event.target.scrollTop :
                        (child.offsetLeft - event.target.offsetLeft) <= event.target.scrollLeft;
                });
                if (!nowContent)
                    return;
                if (nowContent.id !== this._currentContent) {
                    this._currentContent = nowContent.id;
                    this.sscCurrentContentChange.emit(this._currentContent);
                }
            };
        ScrollSpyContentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[scrollSpyContent]'
                    },] },
        ];
        /** @nocollapse */
        ScrollSpyContentDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ScrollSpyContentDirective.propDecorators = {
            target: [{ type: core.Input, args: ['scrollSpyContent',] }],
            sscCurrentContent: [{ type: core.Input }],
            sscCurrentContentChange: [{ type: core.Output }],
            sscDirection: [{ type: core.Input }],
            onScroll: [{ type: core.HostListener, args: ['scroll', ['$event'],] }]
        };
        return ScrollSpyContentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ScrollSpyMenuDirective = (function () {
        function ScrollSpyMenuDirective(_element, _renderer) {
            this._element = _element;
            this._renderer = _renderer;
            this.ssmActiveClassName = "active";
            this.ssmScrollBehavior = "smooth";
            this.ssmScrollBlock = "start";
            this.ssmScrollInline = "nearest";
        }
        Object.defineProperty(ScrollSpyMenuDirective.prototype, "ssmCurrentContent", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this.contentId === value) {
                    this._renderer.addClass(this._element.nativeElement, this.ssmActiveClassName);
                }
                else {
                    this._renderer.removeClass(this._element.nativeElement, this.ssmActiveClassName);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ScrollSpyMenuDirective.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                document.querySelector("#" + this.contentId).scrollIntoView({
                    behavior: this.ssmScrollBehavior,
                    block: this.ssmScrollBlock,
                    inline: this.ssmScrollInline
                });
            };
        ScrollSpyMenuDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[scrollSpyMenu]'
                    },] },
        ];
        /** @nocollapse */
        ScrollSpyMenuDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        ScrollSpyMenuDirective.propDecorators = {
            contentId: [{ type: core.Input, args: ['scrollSpyMenu',] }],
            ssmActiveClassName: [{ type: core.Input }],
            ssmCurrentContent: [{ type: core.Input }],
            ssmScrollBehavior: [{ type: core.Input }],
            ssmScrollBlock: [{ type: core.Input }],
            ssmScrollInline: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return ScrollSpyMenuDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SimpleScrollSpyModule = (function () {
        function SimpleScrollSpyModule() {
        }
        SimpleScrollSpyModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            ScrollSpyContentDirective,
                            ScrollSpyMenuDirective
                        ],
                        exports: [
                            ScrollSpyContentDirective,
                            ScrollSpyMenuDirective
                        ]
                    },] },
        ];
        return SimpleScrollSpyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SimpleScrollSpyModule = SimpleScrollSpyModule;
    exports.ɵa = ScrollSpyContentDirective;
    exports.ɵb = ScrollSpyMenuDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXItc2ltcGxlLXNjcm9sbC1zcHkvbGliL3NpbXBsZS1zY3JvbGwtc3B5LWNvbnRlbnQuZGlyZWN0aXZlLnRzIiwibmc6Ly9hbmd1bGFyLXNpbXBsZS1zY3JvbGwtc3B5L2xpYi9zaW1wbGUtc2Nyb2xsLXNweS1tZW51LmRpcmVjdGl2ZS50cyIsIm5nOi8vYW5ndWxhci1zaW1wbGUtc2Nyb2xsLXNweS9saWIvc2ltcGxlLXNjcm9sbC1zcHkubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzY3JvbGxTcHlDb250ZW50XSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsU3B5Q29udGVudCcpIHB1YmxpYyB0YXJnZXQ7XG5cbiAgcHJpdmF0ZSBfY3VycmVudENvbnRlbnQ6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNzY0N1cnJlbnRDb250ZW50OiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBwdWJsaWMgc3NjQ3VycmVudENvbnRlbnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQElucHV0KCkgcHVibGljIHNzY0RpcmVjdGlvbjogXCJyb3dcIiB8IFwiY29sbXVuXCIgPSBcInJvd1wiO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgb25TY3JvbGwoZXZlbnQ6IGFueSkge1xuICAgIGxldCBub3dDb250ZW50OiBhbnkgPSBBcnJheS5mcm9tPGFueT4odGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgLmZpbHRlcihjaGlsZCA9PiB0aGlzLnRhcmdldCA9PT0gY2hpbGQudGFnTmFtZSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5maW5kKGNoaWxkID0+IHRoaXMuc3NjRGlyZWN0aW9uID09PSBcInJvd1wiID9cbiAgICAgICAgKGNoaWxkLm9mZnNldFRvcCAtIGV2ZW50LnRhcmdldC5vZmZzZXRUb3ApIDw9IGV2ZW50LnRhcmdldC5zY3JvbGxUb3AgOlxuICAgICAgICAoY2hpbGQub2Zmc2V0TGVmdCAtIGV2ZW50LnRhcmdldC5vZmZzZXRMZWZ0KSA8PSBldmVudC50YXJnZXQuc2Nyb2xsTGVmdFxuICAgICAgKTtcbiAgICBpZiAoIW5vd0NvbnRlbnQpIHJldHVybjtcblxuICAgIGlmIChub3dDb250ZW50LmlkICE9PSB0aGlzLl9jdXJyZW50Q29udGVudCkge1xuICAgICAgdGhpcy5fY3VycmVudENvbnRlbnQgPSBub3dDb250ZW50LmlkO1xuICAgICAgdGhpcy5zc2NDdXJyZW50Q29udGVudENoYW5nZS5lbWl0KHRoaXMuX2N1cnJlbnRDb250ZW50KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsU3B5TWVudV0nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweU1lbnVEaXJlY3RpdmUge1xuICBASW5wdXQoJ3Njcm9sbFNweU1lbnUnKSBwdWJsaWMgY29udGVudElkOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgcHVibGljIHNzbUFjdGl2ZUNsYXNzTmFtZSA9IFwiYWN0aXZlXCI7XG4gIEBJbnB1dCgpIHNldCBzc21DdXJyZW50Q29udGVudCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuY29udGVudElkID09PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLnNzbUFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy5zc21BY3RpdmVDbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIHB1YmxpYyBzc21TY3JvbGxCZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IgPSBcInNtb290aFwiO1xuICBASW5wdXQoKSBwdWJsaWMgc3NtU2Nyb2xsQmxvY2s6IFNjcm9sbExvZ2ljYWxQb3NpdGlvbiA9IFwic3RhcnRcIjtcbiAgQElucHV0KCkgcHVibGljIHNzbVNjcm9sbElubGluZTogU2Nyb2xsTG9naWNhbFBvc2l0aW9uID0gXCJuZWFyZXN0XCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIG9uQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuY29udGVudElkfWApLnNjcm9sbEludG9WaWV3KHtcbiAgICAgIGJlaGF2aW9yOiB0aGlzLnNzbVNjcm9sbEJlaGF2aW9yLFxuICAgICAgYmxvY2s6IHRoaXMuc3NtU2Nyb2xsQmxvY2ssXG4gICAgICBpbmxpbmU6IHRoaXMuc3NtU2Nyb2xsSW5saW5lXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Njcm9sbFNweUNvbnRlbnREaXJlY3RpdmV9IGZyb20gXCIuL3NpbXBsZS1zY3JvbGwtc3B5LWNvbnRlbnQuZGlyZWN0aXZlXCI7XG5pbXBvcnQge1Njcm9sbFNweU1lbnVEaXJlY3RpdmV9IGZyb20gXCIuL3NpbXBsZS1zY3JvbGwtc3B5LW1lbnUuZGlyZWN0aXZlXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZSxcbiAgICBTY3JvbGxTcHlNZW51RGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBTY3JvbGxTcHlDb250ZW50RGlyZWN0aXZlLFxuICAgIFNjcm9sbFNweU1lbnVEaXJlY3RpdmVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTaW1wbGVTY3JvbGxTcHlNb2R1bGUgeyB9XG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwiRGlyZWN0aXZlIiwiRWxlbWVudFJlZiIsIklucHV0IiwiT3V0cHV0IiwiSG9zdExpc3RlbmVyIiwiUmVuZGVyZXIyIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQW9CRSxtQ0FBb0IsUUFBb0I7WUFBcEIsYUFBUSxHQUFSLFFBQVEsQ0FBWTsyQ0FIRyxJQUFJQSxpQkFBWSxFQUFVO2dDQUNwQixLQUFLO1NBRVY7Ozs7O1FBRzVDLDRDQUFROzs7O1lBRFIsVUFDUyxLQUFVO2dCQURuQixpQkFlQzs7Z0JBYkMsSUFBSSxVQUFVLEdBQVEsS0FBSyxDQUFDLElBQUksQ0FBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7cUJBQ3hFLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE9BQU8sR0FBQSxDQUFDO3FCQUM5QyxPQUFPLEVBQUU7cUJBQ1QsSUFBSSxDQUFDLFVBQUEsS0FBSztvQkFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLEtBQUssS0FBSzt3QkFD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