/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
var ScrollSpyContentDirective = /** @class */ (function () {
    function ScrollSpyContentDirective(_element) {
        this._element = _element;
        this.sscCurrentContentChange = new EventEmitter();
        this.sscDirection = "row";
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ScrollSpyContentDirective.prototype.onScroll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var nowContent = Array.from(this._element.nativeElement.children)
            .filter(function (child) { return _this.target === child.tagName; })
            .reverse()
            .find(function (child) { return _this.sscDirection === "row" ?
            (child.offsetTop - event.target.offsetTop) <= event.target.scrollTop :
            (child.offsetLeft - event.target.offsetLeft) <= event.target.scrollLeft; });
        if (!nowContent)
            return;
        if (nowContent.id !== this._currentContent) {
            this._currentContent = nowContent.id;
            this.sscCurrentContentChange.emit(this._currentContent);
        }
    };
    ScrollSpyContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scrollSpyContent]'
                },] },
    ];
    /** @nocollapse */
    ScrollSpyContentDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ScrollSpyContentDirective.propDecorators = {
        target: [{ type: Input, args: ['scrollSpyContent',] }],
        sscCurrentContent: [{ type: Input }],
        sscCurrentContentChange: [{ type: Output }],
        sscDirection: [{ type: Input }],
        onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return ScrollSpyContentDirective;
}());
export { ScrollSpyContentDirective };
if (false) {
    /** @type {?} */
    ScrollSpyContentDirective.prototype.target;
    /** @type {?} */
    ScrollSpyContentDirective.prototype._currentContent;
    /** @type {?} */
    ScrollSpyContentDirective.prototype.sscCurrentContent;
    /** @type {?} */
    ScrollSpyContentDirective.prototype.sscCurrentContentChange;
    /** @type {?} */
    ScrollSpyContentDirective.prototype.sscDirection;
    /** @type {?} */
    ScrollSpyContentDirective.prototype._element;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXNjcm9sbC1zcHktY29udGVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNpbXBsZS1zY3JvbGwtc3B5LyIsInNvdXJjZXMiOlsibGliL3NpbXBsZS1zY3JvbGwtc3B5LWNvbnRlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7O0lBYXJCLG1DQUFvQixRQUFvQjtRQUFwQixhQUFRLEdBQVIsUUFBUSxDQUFZO3VDQUhHLElBQUksWUFBWSxFQUFVOzRCQUNwQixLQUFLO0tBRVY7Ozs7O0lBRzVDLDRDQUFROzs7O0lBRFIsVUFDUyxLQUFVO1FBRG5CLGlCQWVDOztRQWJDLElBQUksVUFBVSxHQUFRLEtBQUssQ0FBQyxJQUFJLENBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO2FBQ3hFLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBN0IsQ0FBNkIsQ0FBQzthQUM5QyxPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQzFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdEUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBRjFELENBRTBELENBQ3hFLENBQUM7UUFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUV4QixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUN6RDtLQUNGOztnQkE1QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9COzs7O2dCQVRDLFVBQVU7Ozt5QkFXVCxLQUFLLFNBQUMsa0JBQWtCO29DQUd4QixLQUFLOzBDQUNMLE1BQU07K0JBQ04sS0FBSzsyQkFJTCxZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOztvQ0F0QnBDOztTQVlhLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzY3JvbGxTcHlDb250ZW50XSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5Q29udGVudERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgnc2Nyb2xsU3B5Q29udGVudCcpIHB1YmxpYyB0YXJnZXQ7XG5cbiAgcHJpdmF0ZSBfY3VycmVudENvbnRlbnQ6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNzY0N1cnJlbnRDb250ZW50OiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBwdWJsaWMgc3NjQ3VycmVudENvbnRlbnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQElucHV0KCkgcHVibGljIHNzY0RpcmVjdGlvbjogXCJyb3dcIiB8IFwiY29sbXVuXCIgPSBcInJvd1wiO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgb25TY3JvbGwoZXZlbnQ6IGFueSkge1xuICAgIGxldCBub3dDb250ZW50OiBhbnkgPSBBcnJheS5mcm9tPGFueT4odGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgLmZpbHRlcihjaGlsZCA9PiB0aGlzLnRhcmdldCA9PT0gY2hpbGQudGFnTmFtZSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5maW5kKGNoaWxkID0+IHRoaXMuc3NjRGlyZWN0aW9uID09PSBcInJvd1wiID9cbiAgICAgICAgKGNoaWxkLm9mZnNldFRvcCAtIGV2ZW50LnRhcmdldC5vZmZzZXRUb3ApIDw9IGV2ZW50LnRhcmdldC5zY3JvbGxUb3AgOlxuICAgICAgICAoY2hpbGQub2Zmc2V0TGVmdCAtIGV2ZW50LnRhcmdldC5vZmZzZXRMZWZ0KSA8PSBldmVudC50YXJnZXQuc2Nyb2xsTGVmdFxuICAgICAgKTtcbiAgICBpZiAoIW5vd0NvbnRlbnQpIHJldHVybjtcblxuICAgIGlmIChub3dDb250ZW50LmlkICE9PSB0aGlzLl9jdXJyZW50Q29udGVudCkge1xuICAgICAgdGhpcy5fY3VycmVudENvbnRlbnQgPSBub3dDb250ZW50LmlkO1xuICAgICAgdGhpcy5zc2NDdXJyZW50Q29udGVudENoYW5nZS5lbWl0KHRoaXMuX2N1cnJlbnRDb250ZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==